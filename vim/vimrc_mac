"====[ BEGIN ~/.vimrc ]====

    " Preferred Location: ~/.vimrc
    " Jeff McGovern
    " 6/14/2016
    " 6/15/2016

"====[ Minimal .vimrc (Pilfered) ]====

    " Minimal .vimrc pilfered from:
    " http://stackoverflow.com/questions/1840862/favorite-minimalistic-vimrc-configuration
    setlocal backspace=2 " backspace in insert mode works like normal editor
    syntax on            " syntax highlighting
    filetype indent on   " activates indenting for files
    setlocal autoindent  " auto indenting
    setlocal number      " line numbers
    colorscheme desert   " colorscheme desert
    setlocal nobackup    " get rid of anoying ~file

"====[ Define Shell ]====

    set shell=bash\ --login

"====[ Ignoring Case ]====

    setlocal ignorecase
    setlocal smartcase

"====[ Arrow Removal ]====

    let g:arrowson=1
    func ArrowsOff()
        let g:arrowson=0
        noremap! <Up>    <NOP>
        noremap! <Down>  <NOP>
        noremap! <Left>  <NOP>
        noremap! <Right> <NOP>
        noremap <Up>    <NOP>
        noremap <Down>  <NOP>
        noremap <Left>  <NOP>
        noremap <Right> <NOP>
    endfunc
    func ArrowsOn()
        let g:arrowson=1
        noremap <Up>    <Up>
        noremap <Down>  <Down>
        noremap <Left>  <Left>
        noremap <Right> <Right>
        noremap! <Up>    <Up>
        noremap! <Down>  <Down>
        noremap! <Left>  <Left>
        noremap! <Right> <Right>
    endfunc
    func ToggleArrows()
        if (g:arrowson == 1)
            call ArrowsOff()
        else
            call ArrowsOn()
        endif
    endfunc
    call ArrowsOff()

"====[ Turn Off Error Noises ]====

    setlocal novisualbell " get rid of anoying visual beeps
    setlocal noerrorbells " get rid of anoying audio beeps

"====[ Tabs to Spaces ]====

    " DEFAULT: 4 space tabs
    " expandtab: means TAB key will insert <sofftabstop> number of spaces
     set tabstop=4
     set shiftwidth=4
     set softtabstop=4
     set expandtab

"====[ Tabs, trailing whitespace, and non-breaking spaces visible ]====

    exec "set listchars=tab:\uBB\uBB,trail:\uB7,nbsp:~"
    set list

"====[ Relative Line Numbering ]====

    " change to absolute line numbering
    function! SetLineNumber()
        setlocal norelativenumber
        setlocal number
    endfunc
    " change to relative line numbering
    function! SetRelativeLineNumber()
        setlocal relativenumber
    endfunc
    " toggles relative/absolute line
    function! ToggleLineNumStyle()
        if (&relativenumber == 1)
            call SetLineNumber()
        else
            call SetRelativeLineNumber()
        endif
    endfunc
    " ctrl + n calls toggle
    nnoremap <C-n> :call ToggleLineNumStyle()<cr>
    " DEFAULT: relative line numbering
    call SetRelativeLineNumber() 
    " only relative when pane in focus
    :autocmd WinLeave * call SetLineNumber()
    :autocmd WinEnter * call SetRelativeLineNumber()
    " switches to absolute when in insert
    autocmd InsertEnter * call SetLineNumber()
    autocmd InsertLeave * call SetRelativeLineNumber()

"====[ Future NeoBundle Stuffs ]====

    "NeoBundle 'Rip-Rip/clang_complete '

"====[ Case Insensitive Save and Quit Commands ]====

    :command WQA wqa
    :command WQa wqa
    :command Wqa wqa
    :command QA qa
    :command Qa qa
    :command WA wa
    :command Wa wa
    :command WQ wq
    :command Wq wq
    :command W w
    :command Q q

"====[COMMENTS]=====

    ",# shell, perl, etc
    ",/ c++
    ",> email quote
    "," vim
    ",% latex, prolog
    ",! assembly/X-resources
    ",; scheme
    ",- sql, ada
    ",c clears any of the previous comments

    " lhs comments
    map ,# :s/^/#/<CR>:nohlsearch<CR>
    map ,/ :s/^/\/\//<CR>:nohlsearch<CR>
    map ,> :s/^/> /<CR>:nohlsearch<CR>
    map ," :s/^/\"/<CR>:nohlsearch<CR>
    map ,% :s/^/%/<CR>:nohlsearch<CR>
    map ,! :s/^/!/<CR>:nohlsearch<CR>
    map ,; :s/^/;/<CR>:nohlsearch<CR>
    map ,- :s/^/--/<CR>:nohlsearch<CR>
    map ,c :s/^\/\/\\|^--\\|^> \\|^[#"%!;]//<CR>:nohlsearch<CR>

    " wrapping comments
     map ,* :s/^\(.*\)$/\/\* \1 \*\//<CR>:nohlsearch<CR>
     map ,( :s/^\(.*\)$/\(\* \1 \*\)/<CR>:nohlsearch<CR>
     map ,< :s/^\(.*\)$/<!-- \1 -->/<CR>:nohlsearch<CR>
     map ,d :s/^\([/(]\*\\|<!--\) \(.*\) \(\*[/)]\\|-->\)$/\2/<CR>:nohlsearch<CR>

"====[ FileType Specifics ]====

"====[ END ~/.vimrc ]====
